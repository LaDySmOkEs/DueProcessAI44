import { createClient } from 'npm:@base44/sdk@0.1.0';
import Stripe from 'npm:stripe@^14';

const base44 = createClient({ appId: Deno.env.get('BASE44_APP_ID') });
const stripe = new Stripe(Deno.env.get('Stripe key'));

Deno.serve(async (req) => {
    try {
        const authHeader = req.headers.get('Authorization');
        if (!authHeader) return new Response('Unauthorized', { status: 401 });

        base44.auth.setToken(authHeader.split(' ')[1]);
        const user = await base44.auth.me();

        // The portal session requires a valid customer ID. If it's missing or invalid, we return a helpful error.
        if (!user || !user.stripe_customer_id || !user.stripe_customer_id.startsWith('cus_')) {
            return new Response(JSON.stringify({ error: 'Valid Stripe customer ID not found. Please subscribe to a plan first to manage your subscription.' }), { status: 404, headers: { 'Content-Type': 'application/json' } });
        }

        const portalSession = await stripe.billingPortal.sessions.create({
            customer: user.stripe_customer_id,
            return_url: `${req.headers.get('origin')}/Billing`,
        });

        return new Response(JSON.stringify({ url: portalSession.url }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
        });

    } catch (error) {
        console.error('Stripe Portal Error:', error);
        let message = error.message;
        if (error.type === 'StripeAuthenticationError') {
            message = 'Invalid Stripe API Key. Please ensure the correct Secret Key (starting with sk_live_ or sk_test_) is set in your app\'s environment variables.';
        }
        return new Response(JSON.stringify({ error: message }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' },
        });
    }
});
